##
# Basic Required Variables for tfscaffold Components
##

variable "project" {
  type        = string
  description = "The name of the tfscaffold project"
}

variable "environment" {
  type        = string
  description = "The name of the tfscaffold environment"
}

variable "component" {
  type        = string
  description = "The name of the tfscaffold component"
}

variable "aws_account_id" {
  type        = string
  description = "The AWS Account ID (numeric)"
}

variable "region" {
  type        = string
  description = "The AWS Region"
}

variable "aws_partition" {
  type        = string
  description = "AWS Partition"
  default     = "aws"
}

variable "aws_url_suffix" {
  type        = string
  description = "AWS URL Suffix"
  default     = "amazonaws.com"
}

##
# tfscaffold variables specific to this module
##

variable "module" {
  type        = string
  description = "The variable encapsulating the name of this module"
  default     = "lambdacron"
}

variable "default_tags" {
  type        = map(string)
  description = "A map of default tags to apply to all taggable resources within the component"
  default     = {}
}

##
# Variables specific to this module
##

variable "function_name" {
  type        = string
  description = "Base name of this lambda"
}

variable "description" {
  type        = string
  description = "Description of the Lambda"
}

variable "function_module_name" {
  type        = string
  description = "The optional name of the function module as used by the lambda handler, e.g. index or exports. Concatenated with handler_function_name to make, `<var.function_module_name>.<var.handler_function_name>`"
  default     = null
}

variable "handler_function_name" {
  type        = string
  description = "The name of the lambda handler function (passed directly to the Lambda's handler option)"
  default     = "handler"
}

variable "memory" {
  type        = number
  description = "The amount of memory to apply to the created Lambda"
}

variable "timeout" {
  type        = number
  description = "Timeout in seconds of the lambda function invocation"
}

variable "log_retention_in_days" {
  type        = string
  description = "The retention period for the CloudwatchLogs events generated by the lambda function"
}

variable "runtime" {
  type        = string
  description = "The runtime to use for the lambda function"
}

variable "cloudwatch_event_target_input" {
  type        = string
  description = "Optional JSON string to use as constant input for the Cloudwatch Event Target that invokes the lambda if using scheduled events"
  default     = null
}

variable "allowed_triggers" {
  description = "Map of allowed triggers to create Lambda permissions"
  type        = map(any)
  default     = {}
}

variable "schedule" {
  type        = string
  description = "The fully qualified Cloudwatch Events schedule for when to run the lambda function, e.g. rate(1 day) or a cron() expression. Default disables all events resources"
  default     = ""
}

variable "iam_policy_documents" {
  type        = list(string)
  description = "An IAM Policy Document to grant the lambda function access to the API calls it needs. Should be the 'json' attribute of an aws_iam_policy_document data source"
  default     = []
}

variable "lambda_env_vars" {
  type        = map(string)
  description = "Lambda environment parameters map"
  default     = {}
}

##
# Function Source is either a string containing function code,
# or a directory containing the function source files

variable "function_source_type" {
  type        = string
  description = "The type of function source, either s3, file or directory"
}

## EITHER

# A directory we will zip up to create the function archive

variable "function_dir" {
  type        = string
  description = "Relative Lambda function directory path"
  default     = null
}

## OR

# Content that we will write to a file and then zip up to create the function archive

variable "function_source" {
  type        = string
  description = "The source code of the lambda function as a single file expressed as a string"
  default     = null
}

variable "function_file_extension" {
  type        = string
  description = "The function source file extension, e.g. js or py"
  default     = null
}

## OR

# An S3 object in the same region as this function that we will give to the lambda
# principal to use (where it will steal our credentials to access the object)

variable "function_source_s3_key" {
  type        = string
  description = "Key name of the lambda function source Zip archive, stored in an S3 bucket"
  default     = null
}

variable "function_source_s3_bucket" {
  type        = string
  description = "Bucket ID containing the lambda function source Zip archive"
  default     = null
}

variable "function_source_version_id" {
  type        = string
  description = "An optional S3 Object ID for the function source archive"
  default     = null
}

## OR

# The path to a file on disk that contains the lambda function code.
# Primarily used when the archive is in a destination we cannot access,
# but from where the calling module can make the zip content available to us

variable "function_source_archive_file_path" {
  type        = string
  description = "Path to a deployable lambda function archive zip-file on disk"
  default     = null
}

##

# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/lambda_function#tracing_config
# PassThrough is default to reduce costs - please see docs for more details
variable "xray_mode" {
  type        = string
  description = "Mode for AWS X-Ray"
  default     = "PassThrough"
}

variable "enable_dlq" {
  type        = bool
  description = "Pass false to disable creation of the DLQ"
  default     = true
}

variable "subscription_arns" {
  type        = list(map(string))
  description = "List of subscriptions for the SNS topic"
  default     = []
}

# NOTE: There is a limit of 5 layers. If you enable the lambda insights that limit
#       goes down to 4 since lamba insights adds a layer.
variable "lambda_layers" {
  type        = list(string)
  description = "Additional lambda layers to include"
  default     = []
}

variable "use_lambda_insights" {
  type        = bool
  description = "Enable lambda insights layer"
  default     = false
}

# This is for the very edge case where the lambda needs a specific name which does not
# include the CSI. Do not use this unless you know what you're doing.
variable "absolute_function_name" {
  type        = bool
  description = "Use the 'function_name' rather than munging it into the CSI"
  default     = false
}
